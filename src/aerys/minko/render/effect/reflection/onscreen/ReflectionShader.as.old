package aerys.minko.render.effect.reflection.onscreen
{
	import aerys.minko.render.effect.reflection.ReflectionProperties;
	import aerys.minko.render.shader.ActionScriptShader;
	import aerys.minko.render.shader.SFloat;
	import aerys.minko.render.shader.part.BlendingShaderPart;
	import aerys.minko.render.shader.part.PixelColorShaderPart;
	import aerys.minko.render.shader.part.animation.VertexAnimationShaderPart;
	import aerys.minko.render.shader.parts.reflection.ReflectionShaderPart;
	
	public class ReflectionShader extends ActionScriptShader
	{
		private var _vertexAnimationPart	: VertexAnimationShaderPart;
		private var _pixelColorPart			: PixelColorShaderPart;
		private var _blendingShaderPart		: BlendingShaderPart;
		private var _reflectionPart			: ReflectionShaderPart;
		
		private var _vertexPosition : SFloat;
		private var _vertexNormal	: SFloat;
		
		public function ReflectionShader()
		{
			_vertexAnimationPart	= new VertexAnimationShaderPart(this);
			_pixelColorPart			= new PixelColorShaderPart(this);
			_reflectionPart			= new ReflectionShaderPart(this);
		}
		
		override protected function getVertexPosition():SFloat
		{
			_vertexPosition = _vertexAnimationPart.getAnimatedVertexPosition();
			_vertexNormal	= _vertexAnimationPart.getAnimatedVertexNormal();
			
			return localToScreen(_vertexPosition);
		}
		
		override protected function getPixelColor() : SFloat
		{
			var color			: SFloat = _pixelColorPart.getPixelColor();
			var reflectionColor	: SFloat = _reflectionPart.getReflectionColor();
			
			if (reflectionColor != null)
			{
				var refBlending : uint = meshBindings.getProperty(ReflectionProperties.BLENDING);
				color = _blendingShaderPart.blend(reflectionColor, color, refBlending);
			}
			
			return color;
		}
	}
}
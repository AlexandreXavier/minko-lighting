package aerys.minko.render.effect.reflection.offscreen
{
	import aerys.minko.render.shader.ActionScriptShader;
	import aerys.minko.render.shader.SFloat;
	import aerys.minko.render.shader.part.PixelColorShaderPart;
	import aerys.minko.render.shader.part.animation.VertexAnimationShaderPart;
	
	public class PlanarReflectionMapShader extends ActionScriptShader
	{
		private var _animationPart	: VertexAnimationShaderPart;
		private var _diffusePart	: PixelColorShaderPart;
		
		private var _reflectionId	: uint;
		private var _vertexPosition	: SFloat;
		
		public function PlanarReflectionMapShader(reflectionId : uint)
		{
			_reflectionId	= reflectionId;
			_animationPart	= new VertexAnimationShaderPart(this);
			_diffusePart	= new PixelColorShaderPart(this);
		}
		
		override protected function getVertexPosition() : SFloat
		{
			_vertexPosition = _animationPart.getAnimatedVertexPosition();
			
			return localToScreen(_vertexPosition);
		}
		
		override protected function getPixelColor() : SFloat
		{
			var diffuse					: SFloat = _diffusePart.getPixelColor();
			
			var localToSurface			: SFloat = getWorldParameter(16, ReflectionData, ReflectionData.LOCAL_TO_PLANE, _reflectionId);
			var pixelIsAfterThePlane	: SFloat = multiply4x4(interpolate(_vertexPosition), localToSurface).z;
			var cameraIsAfterThePlane	: SFloat = getWorldParameter(1, ReflectionData, ReflectionData.CAMERA_SIDE, _reflectionId);
			
			kill(multiply(cameraIsAfterThePlane, pixelIsAfterThePlane));
			
			return diffuse;
		}
		
	}
}
